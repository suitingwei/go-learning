package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"
)

func main_2() {
	ui_browsers := browsers()
	fmt.Println(ui_browsers)

	cmd := exec.Command("/usr/bin/open /tmp/a.avg")
	err := cmd.Start()
	if err != nil {
		fmt.Println(err)
		return
	}

	for _, v := range ui_browsers {
		// Separate command and arguments for exec.Command.
		args := strings.Split(v, " ")
		if len(args) == 0 {
			continue
		}
		viewer := exec.Command(args[0], append(args[1:], "/tmp/a.svg")...)
		viewer.Stderr = os.Stderr
		if err := viewer.Start(); err == nil {
			// Wait for a second so that the visualizer has a chance to
			// open the input file. This needs to be done even if we're
			// waiting for the visualizer as it can be just a wrapper that
			// spawns a browser tab and returns right away.
			defer func(t <-chan time.Time) {
				<-t
			}(time.After(time.Second))
			return
		}
	}
}

func browsers() []string {
	var cmds []string
	if userBrowser := os.Getenv("BROWSER"); userBrowser != "" {
		cmds = append(cmds, userBrowser)
	}
	switch runtime.GOOS {
	case "darwin":
		cmds = append(cmds, "/usr/bin/open ")
	case "windows":
		cmds = append(cmds, "cmd /c start")
	default:
		// Commands opening browsers are prioritized over xdg-open, so browser()
		// command can be used on linux to open the .svg file generated by the -web
		// command (the .svg file includes embedded javascript so is best viewed in
		// a browser).
		cmds = append(cmds, []string{"chrome", "google-chrome", "chromium", "firefox", "sensible-browser"}...)
		if os.Getenv("DISPLAY") != "" {
			// xdg-open is only for use in a desktop environment.
			cmds = append(cmds, "xdg-open")
		}
	}
	return cmds
}
